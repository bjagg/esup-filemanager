<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to EsupPortail under one or more contributor license
    agreements. See the NOTICE file distributed with this work for
    additional information regarding copyright ownership.

    EsupPortail licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file except in
    compliance with the License. You may obtain a copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">


  <!-- drivesCategories lets you organize the tree of your drives .
       On the root you can have categories and on each categories you can have drives.
       Drives are defined bellow : values of 'drives' property must map to a FSAccess bean.
  -->
  <util:map id="drivesCategories">
    <entry key="Shared">
      <bean class="org.esupportail.portlet.filemanager.beans.DrivesCategory">
	<property name="icon" value="/esup-filemanager/img/drives/house.png" />
	<property name="drives">
	  <list>
	    <value>Toto</value>
	    <value>bob</value>
	  </list>
	</property>
      </bean>
    </entry>
    <entry key="Homedir">
      <bean class="org.esupportail.portlet.filemanager.beans.DrivesCategory">
	<property name="icon" value="/esup-filemanager/img/drives/drive_user.png" />
	<property name="drives">
	  <list>
	    <value>Stock2</value>
	    <value>Stock2Cas</value>
	    <value>DAV Ex</value>
	    <value>CIFS Ex</value>
	  </list>
	</property>
      </bean>
    </entry>
    <entry key="ECM">
      <bean class="org.esupportail.portlet.filemanager.beans.DrivesCategory">
	<property name="icon" value="/esup-filemanager/img/drives/group.png" />
	<property name="drives">
	  <list>
	    <value>Cmis</value>
	  </list>
	</property>
      </bean>
    </entry>
  </util:map>

  <!-- Here it's the definition of a FSAccess bean : here we use a 'VfsAccessImpl'
       This implementation of drive uses Apache Commons VFS.
       So you can see uri format here :
       http://commons.apache.org/vfs/filesystems.html
       Take care, by default 'mvn package' doesn't provide cifs or webdav support.
       If you want to use cifs or webdav,
          * (*deprecated* : before esup-filemanager 1.1.0 you should use the maven profil named vfs-sandbox :
       'mvn package -P vfs-sandbox' / 'mvn jetty:run -P vfs-sandbox')
          * you  should now use instead SardineAccessImpl (webdav) or CifsAccessImpl (cifs) - see examples below

       You can choose as authentication
       * no authentication
       * simple authentication : we give username/password in this config file for all
       * trusted authentication : we give an userInfo4Username parameter that retrieve username from portal
       * form authentication : we will ask username/password to the user when accessing this drive
       * cas authentication : we're using proxy cas

       Toto uses a simple authentication : all people use the same connection with the same username/password
       Toto is displayed only to members of pags.mon-univ

       This drive is displayed only for people who belong to the group "pags.mon-univ"
   -->
  <bean class="org.esupportail.portlet.filemanager.services.vfs.VfsAccessImpl" lazy-init="true">
    <property name="driveName" value="Toto"/>
    <property name="icon" value="/esup-filemanager/img/drives/tux.png" />
    <property name="uri" value="sftp://stock-2.mon-univ.fr/"/>
    <property name="evaluator">
	<bean class="org.esupportail.portlet.filemanager.services.evaluators.UserRoleEvaluator" >
            <property name="group" value="pags.mon-univ" />
	</bean>
    </property>
    <property name="userAuthenticatorService" ref="simpleUserAuthenticationService"/>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>

  <bean name="simpleUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.UserPasswordAuthenticatorService">
    <property name="username" value="bonamvin"/>
    <property name="password" value="toto"/>
  </bean>



  <!-- bob doesn't use authentication
  bob is displayed to all people
  -->
  <bean  class="org.esupportail.portlet.filemanager.services.vfs.VfsAccessImpl" lazy-init="true">
    <property name="driveName" value="bob"/>
    <property name="icon" value="/esup-filemanager/img/drives/root.png" />
    <property name="uri" value="file:///"/>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>


 <!-- Stock2 uses a form authentication
      uri contains a token @uid@ : it will be replaced with the value of uid attribute that will be gived by portal
      (so we should modify portlet.xml to ask portal to give this "uid" attribute user)
      you can use all attributes user provided by portal here like this
      you can also use the special token @form_username@ which is replaced with the value of the form username
      that can be gived by the user (when the access requires a form user authentication)
  -->
  <bean class="org.esupportail.portlet.filemanager.services.vfs.VfsAccessImpl" scope="session" lazy-init="true">
    <property name="driveName" value="Stock2"/>
    <property name="icon" value="/esup-filemanager/img/drives/root.png" />
    <property name="uri" value="sftp://stock-2.mon-univ.fr/home/@uid@/"/>
    <property name="evaluator">
        <!--
            Stock2 has an evaluator with :
            * group evaluator : the user should belong to pags.composante3 or/and pags.composante5 so that Stock2 will be displayed
            * AND pref evaluator : the published portlet must have a portlet preference/paramater named contextToken
            and with value justStock2  so that Stock2 will be displayed
        -->
			<bean class="org.esupportail.portlet.filemanager.services.evaluators.GroupEvaluator" >
            <property name="type" value="AND"/>
            <property name="evaluators">
                <list>
                    <bean class="org.esupportail.portlet.filemanager.services.evaluators.GroupEvaluator" >
                        <property name="type" value="OR"/>
                        <property name="evaluators">
                            <bean class="org.esupportail.portlet.filemanager.services.evaluators.ListUserRoleEvaluatorEditor">
                                <property name="groupList">
                                    <list>
                                        <value>pags.composante3</value>
                                        <value>pags.composante5</value>
                                    </list>
                                </property>
                            </bean>
                        </property>
                    </bean>
                    <bean class="org.esupportail.portlet.filemanager.services.evaluators.PreferenceEvaluator" >
                        <property name ="attribute" value="contextToken"/>
                        <property name ="value" value="justStock2"/>
                    </bean>
                </list>
            </property>
			</bean>
  </property>
	<property name="quotaService">
		<bean
			class="org.esupportail.portlet.filemanager.services.quota.QuotaServiceSimpleWS">
			<property name="webUrl"
				value="http://stock-2.mon-univ.fr/cgi-bin/quota.sh?{uid}" />
			<property name="restTemplate" ref="restTemplate" />
		</bean>
	</property>
    <property name="userAuthenticatorService" ref="formUserAuthenticationService"/>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>

  <!-- here we will set by default the username in the form with the value of uid attribute (gived by the portal) -->
  <bean name="formUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.FormUserPasswordAuthenticatorService"
	scope="session">
    <property name="userInfo4Username" value="uid"/>
  </bean>

  <!-- here a trusted authentication (password is the same for all) - note that we don't use it in drives examples -->
  <bean name="trustedUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.UserPasswordAuthenticatorService"
	scope="session">
    <property name="userInfo4Username" value="uid"/>
    <property name="password" value="commonTrustedPassword4All"/>
  </bean>

  <!-- Stock2Cas uses proxy cas authentication
       sftpSetUserDirIsRoot is set to use user directory as root

       Note also this drive is displayed only for people who has
       attribute affiliation matches (regex) (.*)student(.*)
       and compsante = unecomposante ...
  -->
  <bean class="org.esupportail.portlet.filemanager.services.vfs.VfsAccessImpl" scope="session" lazy-init="true">
    <property name="driveName" value="Stock2Cas"/>
    <property name="icon" value="/esup-filemanager/img/drives/root.png" />
    <property name="uri" value="sftp://stock-2.mon-univ.fr/"/>
    <property name="sftpSetUserDirIsRoot" value="true"/>
    <property name="evaluator">
	<bean class="org.esupportail.portlet.filemanager.services.evaluators.GroupEvaluator" >
            <property name="type" value="AND" />
            <property name="evaluators">
                <list>
                    <bean class="org.esupportail.portlet.filemanager.services.evaluators.UserAttributesEvaluator">
                        <property name="attribute" value="affiliation" />
                        <property name="value" value="(.*)student(.*)" />
                        <property name="mode" value="MATCH" />
                    </bean>
                    <bean class="org.esupportail.portlet.filemanager.services.evaluators.UserAttributesEvaluator">
                        <property name="attribute" value="composante" />
                        <property name="value" value="unecomposante" />
                        <property name="mode" value="EQUALS" />
                    </bean>
                </list>
            </property>
	</bean>
    </property>
    <property name="userAuthenticatorService" ref="casUserAuthenticationService"/>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>


  <!-- you have to define one casUserAuthenticationService per drive -->
  <bean name="casUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.cas.UserCasAuthenticatorService">
      <property name="proxyTicketService" ref="casService"/>
      <property name="userCasAuthenticatorServiceRoot" ref="casUserAuthenticationServiceRoot"/>
      <property name="target" value="sftp://stock-2.mon-univ.fr"/>
  </bean>

  <!-- if you want to use clearPass (CAS V5) use instead this casUserAuthenticationService - scope = session is needed because of fallback form auth capabilty of ClearPassUserCasAuthenticatorService
  <bean name="casUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.cas.ClearPassUserCasAuthenticatorService" scope="session">
      <property name="userCasAuthenticatorServiceRoot" ref="casUserAuthenticationServiceRoot"/>
      <property name="pkcs8Key" value="/etc/cas/config/security/private.p8"/>
      </bean>
  -->

  <!-- note casUserAuthenticationServiceRoot, casService, ticketValidator, ticketValidationFilter proxyGrantingTicketStorage and  are sufficient for more than one drive-->

  <bean name="casUserAuthenticationServiceRoot" class="org.esupportail.portlet.filemanager.services.auth.cas.UserCasAuthenticatorServiceRoot">
      <property name="proxyTicketService" ref="casService"/>
      <property name="userInfoTicketProperty" value="casProxyTicket"/>
  </bean>

  <bean id="casService" class="org.esupportail.portlet.filemanager.services.auth.cas.ProxyTicketService">
      <property name="serviceUrl" value="https://ent.mon-univ.fr/esup-filemanager"/>
      <property name="ticketValidator" ref="ticketValidator"/>
  </bean>

  <bean id="ticketValidator" class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator">
      <constructor-arg index="0" value="https://cas.mon-univ.fr" />
      <property name="proxyCallbackUrl" value="https://ent.mon-univ.fr/esup-filemanager/CasProxyServlet"/>
      <property name="acceptAnyProxy" value="true"/>
      <property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage"/>
  </bean>

  <!-- Ticket validation filter -->
  <bean id="ticketValidationFilter"
        class="org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter">
      <property name="serverName" value="cas.mon-univ.fr"/>
      <property name="redirectAfterValidation" value="false"/>
      <property name="proxyReceptorUrl" value="/CasProxyServlet"/>
      <property name="ticketValidator" ref="ticketValidator"/>
      <property name="proxyGrantingTicketStorage" ref="proxyGrantingTicketStorage"/>
  </bean>

  <bean id="proxyGrantingTicketStorage" class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl" />


 <!-- Definition of a FSAccess bean : here we have a 'SardineAccessImpl' to use a webdav shared folder -->
  <bean class="org.esupportail.portlet.filemanager.services.sardine.SardineAccessImpl" scope="session" lazy-init="true">
    <property name="driveName" value="DAV Ex"/>
    <property name="icon" value="/esup-filemanager/img/drives/drive_network.png" />
    <property name="uri" value="http://dav.mon-univ.fr"/>
    <property name="userAuthenticatorService" ref="davFormUserAuthenticationService"/>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>

  <bean name="davFormUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.FormUserPasswordAuthenticatorService"
        scope="session"/>


 <!-- Definition of a FSAccess bean : here we have a 'CifsAccessImpl' to use a cifs shared folder -->
  <bean class="org.esupportail.portlet.filemanager.services.cifs.CifsAccessImpl" scope="session" lazy-init="true">
    <property name="driveName" value="CIFS Ex"/>
    <property name="icon" value="/esup-filemanager/img/drives/drive_network.png" />
    <property name="uri" value="smb://cifs.mon-univ.fr/shared/"/>
    <property name="jcifsConfigProperties" ref="cifsProperties" />
    <property name="userAuthenticatorService" ref="formUAS4"/>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>

  <util:properties id="cifsProperties">
    <prop key="jcifs.resolveOrder">DNS,BCAST</prop>
    <prop key="jcifs.encoding">UTF8</prop>
    <prop key="jcifs.smb.client.disablePlainTextPasswords">true</prop>
    <prop key="jcifs.smb.client.responseTimeout">40000</prop>
  </util:properties>

  <bean id="formUAS4" class="org.esupportail.portlet.filemanager.services.auth.FormUserPasswordAuthenticatorService"
	scope="session">
    <property name="userInfo4Username" value="ENTPersonLogin"/>
    <property name="domain" value="mon-univ.fr"/>
  </bean>



  <!-- Here it's the definition of a FSAccess bean : here we have a 'TrustedCmisAccessImpl'
       This implementation of drive (using CMIS like FileSystem protocol) has been (at the moment)
       tested only with Nuxeo (nuxeo-dm-5.4.0-tomcat)
       Like for others, you can choose as authentication
       * no authentication
       * simple authentication : we give username/password in this config file for all
       * form authentication : we will ask username/password to the user when accessing this drive
       * cas authentication : we're using proxy cas
       You can also use a "shibboleth like" authentication :
       esup-filemanager send request with specific http headers
       so that the Nuxeo "nuxeo-platform-login-shibboleth" plugin (for nuxeo) authenticates esup-filemanager
       trusting http headers.
  -->
  <bean class="org.esupportail.portlet.filemanager.services.opencmis.TrustedCmisAccessImpl" scope="session" lazy-init="true">
    <property name="driveName" value="Cmis"/>
    <property name="icon" value="/esup-filemanager/img/drives/group.png" />
    <property name="uri" value="http://localhost:6081/nuxeo/atom/cmis"/>
    <property name="respositoryId" value="default"/>
    <!-- property name="rootPath" value="/default-domain/UserWorkspaces/@uid@"/-->
    <!-- property name="rootPath" value="/default-domain/UserWorkspaces/bernard-mon-univ-fr"/-->
    <!-- workspaces works for example -->
    <property name="rootPath" value="/default-domain/workspaces"/>
    <!--property name="userAuthenticatorService" ref="cmisSimpleUserAuthenticationService"/-->
    <!--property name="userAuthenticatorService" ref="cmisFormUserAuthenticationService"/-->

   	<!-- You can use Nuxeo PORTAL_AUTH setting nuxeoPortalSsoSecretKey and nuxeoPortalSsoUsernameAttribute -->
    <!--property name="nuxeoPortalSsoSecretKey" value="nuxeo5secretkey"/>
    <property name="nuxeoPortalSsoUsernameAttribute" value="uid"/-->

    <!--  userinfosHttpheadersMap : it is used only in portlet mode beacause setinfos must be available -->
    <property name="userinfosHttpheadersMap">
      <map>
		<entry key="eppn" value="uid"/>
		<entry key="affiliation" value="affiliation"/>
      </map>
    </property>
    <!-- staticHttpheadersMap : you can use it in servlet mode for testing
	 (and portlet mode but for portlet mode use instead userinfosHttpheadersMap) -->
    <property name="staticHttpheadersMap">
      <map>
		<entry key="eppn" value="bernard@mon-univ.fr"/>
		<entry key="affiliation" value="member@mon-univ.fr"/>
      </map>
    </property>
    <property name="evaluator">
        <bean class="org.esupportail.portlet.filemanager.services.evaluators.GroupEvaluator" >
            <property name="type" value="NOT"/>
            <property name="evaluators">
                <list>
                    <bean class="org.esupportail.portlet.filemanager.services.evaluators.UserRoleEvaluator" >
                        <property name="group" value="pags.composante3" />
                    </bean>
                </list>
            </property>
        </bean>
    </property>
    <property name="resourceUtils" ref="resourceUtils"/>
  </bean>

  <!-- by default, we don't use it here : no reference is made on Cmis drive : it's commented -->
  <bean name="cmisSimpleUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.UserPasswordAuthenticatorService">
    <property name="username" value="Administrator"/>
    <property name="password" value="Administrator"/>
  </bean>

  <!-- by default, we don't use it here : no reference is made on Cmis drive : it's commented -->
  <bean name="cmisFormUserAuthenticationService" class="org.esupportail.portlet.filemanager.services.auth.FormUserPasswordAuthenticatorService"
	scope="session">
    <property name="userInfo4Username" value="eppn"/>
  </bean>


</beans>